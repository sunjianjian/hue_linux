#ifndef BDUER_HUE_H
#define BDUER_HUE_H

#include <pthread.h>
#include <string>

using std::string;

namespace bduer {
    class Hue {

    private:
        static Hue *instance;
        static void (*_log_function)(int log_level, const char *log_content);

        static const int LOG_DEBUG = 0;
        static const int LOG_INFO = 1;
        static const int LOG_ERROR = 2;
        static const int LOG_BUFFER_SIZE = 4096;
        static char _log_buffer[LOG_BUFFER_SIZE];
        static const int DATA_BUFFER_SIZE = 4096;
        static unsigned char _data_buffer[DATA_BUFFER_SIZE];

        static pthread_t pid;
        static const int UPNP_PORT = 1900;
        static int _multicast_send_socket;
        static int _multicast_receive_socket;
        static int _unicast_receive_socket;
        static bool _searchingIpBridge;
        static char _ipBridgeAddress[20];
        static char _newIpBridgeAddress[20];
        static const int USER_NAME_SIZE = 100;
        static char _userName[USER_NAME_SIZE];
        static const int URL_BUFFER_SIZE = 1024;
        static char _url_buffer[URL_BUFFER_SIZE];
        static const int BODY_BUFFER_SIZE = 4096;
        static char _body_buffer[BODY_BUFFER_SIZE];
        static const int RESPONSE_BUFFER_SIZE = 4096;
        static char _response_buffer[BODY_BUFFER_SIZE];
    public:
        static Hue* get_instance();
        static void init(void (*log_function)(int log_level, const char *log_content));
        static bool searchIpBridge(int timeout, char *ipBridgeAddress); //timeout is in seconds
        static void setIpBridge(char *ipBridgeAddress);
        static void getCongiguration(); //just print the configuration in log, nothing else
        static bool create_user(char *autoGeneratedUserName);
        static bool turn_on_light(int light_number);
        static bool turn_off_light(int light_number);
        static bool set_light_brightness(int light_number, int brightness);
        static bool set_light_color(int light_number, int color);
    private:
        Hue();
        static void log(int log_level, const char *fmt,...);
        static void log_hex_dump(int log_level, const unsigned char *data, const int data_length);
        static void loadDefaultConfiguration();
        static bool init_sockets();
        static void* receive_thread(void* args);
        static int send_multicast_packet(const unsigned char *data, const int data_length);
        static int receive_multicast_packet(unsigned char *data, const int data_length);
        static int receive_unicast_packet(unsigned char *data, const int data_length);
        static size_t curl_process_data(void *data, size_t size, size_t nmemb, string &content);
        static bool curl_customer_request(char *method, char *url, char *body, char *response);
        static bool getJsonStringValue(const char *content, const char *tag, char *value);
    };
}

#endif //BDUER_HUE_H
